// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESOURCES_BALLFALL_RESOURCES_H_
#define FLATBUFFERS_GENERATED_RESOURCES_BALLFALL_RESOURCES_H_

#include "flatbuffers/flatbuffers.h"

namespace BallFall {
namespace Resources {

struct Resources;

struct Font;

struct Bitmap;

struct Resources FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FONTS = 4,
    VT_BITMAPS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<Font>> *fonts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Font>> *>(VT_FONTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Bitmap>> *bitmaps() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Bitmap>> *>(VT_BITMAPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FONTS) &&
           verifier.Verify(fonts()) &&
           verifier.VerifyVectorOfTables(fonts()) &&
           VerifyOffset(verifier, VT_BITMAPS) &&
           verifier.Verify(bitmaps()) &&
           verifier.VerifyVectorOfTables(bitmaps()) &&
           verifier.EndTable();
  }
};

struct ResourcesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fonts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Font>>> fonts) {
    fbb_.AddOffset(Resources::VT_FONTS, fonts);
  }
  void add_bitmaps(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Bitmap>>> bitmaps) {
    fbb_.AddOffset(Resources::VT_BITMAPS, bitmaps);
  }
  ResourcesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResourcesBuilder &operator=(const ResourcesBuilder &);
  flatbuffers::Offset<Resources> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Resources>(end);
    return o;
  }
};

inline flatbuffers::Offset<Resources> CreateResources(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Font>>> fonts = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Bitmap>>> bitmaps = 0) {
  ResourcesBuilder builder_(_fbb);
  builder_.add_bitmaps(bitmaps);
  builder_.add_fonts(fonts);
  return builder_.Finish();
}

inline flatbuffers::Offset<Resources> CreateResourcesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Font>> *fonts = nullptr,
    const std::vector<flatbuffers::Offset<Bitmap>> *bitmaps = nullptr) {
  return BallFall::Resources::CreateResources(
      _fbb,
      fonts ? _fbb.CreateVector<flatbuffers::Offset<Font>>(*fonts) : 0,
      bitmaps ? _fbb.CreateVector<flatbuffers::Offset<Bitmap>>(*bitmaps) : 0);
}

struct Font FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct FontBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Font::VT_DATA, data);
  }
  FontBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FontBuilder &operator=(const FontBuilder &);
  flatbuffers::Offset<Font> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Font>(end);
    return o;
  }
};

inline flatbuffers::Offset<Font> CreateFont(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  FontBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Font> CreateFontDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  return BallFall::Resources::CreateFont(
      _fbb,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

struct Bitmap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_DATA = 8
  };
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct BitmapBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(Bitmap::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(Bitmap::VT_HEIGHT, height, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Bitmap::VT_DATA, data);
  }
  BitmapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BitmapBuilder &operator=(const BitmapBuilder &);
  flatbuffers::Offset<Bitmap> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Bitmap>(end);
    return o;
  }
};

inline flatbuffers::Offset<Bitmap> CreateBitmap(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  BitmapBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline flatbuffers::Offset<Bitmap> CreateBitmapDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    const std::vector<uint8_t> *data = nullptr) {
  return BallFall::Resources::CreateBitmap(
      _fbb,
      width,
      height,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

inline const BallFall::Resources::Resources *GetResources(const void *buf) {
  return flatbuffers::GetRoot<BallFall::Resources::Resources>(buf);
}

inline const char *ResourcesIdentifier() {
  return "BFRE";
}

inline bool ResourcesBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ResourcesIdentifier());
}

inline bool VerifyResourcesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BallFall::Resources::Resources>(ResourcesIdentifier());
}

inline void FinishResourcesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BallFall::Resources::Resources> root) {
  fbb.Finish(root, ResourcesIdentifier());
}

}  // namespace Resources
}  // namespace BallFall

#endif  // FLATBUFFERS_GENERATED_RESOURCES_BALLFALL_RESOURCES_H_
